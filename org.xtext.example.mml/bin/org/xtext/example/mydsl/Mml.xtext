grammar org.xtext.example.mydsl.Mml with org.eclipse.xtext.common.Terminals

generate mml "http://www.xtext.org/example/mydsl/Mml"

MMLModel:
	"Model:"  (pream=PREAMBULE)?
	(input=DataInput)?
	(algorithm=MLChoiceAlgorithm)?
	formula=RFormula?
	validation=Validation
	"End."
	;

PREAMBULE:
	nomProgramme=ID 
;

/*
 * mini DSL to read data (here CSV)
 * mini CSV DSL
 */
DataInput: 'datainput' filelocation=STRING (parsingInstruction=CSVParsingConfiguration)?;

CSVParsingConfiguration:
	// we could extend it with quotes handling, encoding format, or even specificities of library used to parse it (eg pandas vs readcsv)
	"separator" sep=CSVSeparator 	
;

enum CSVSeparator : COMMA=',' | SEMI_COLON=";" ;

/*
 * mini DSL to select the ML algorithm we want 
 * we include the choice of the targeted language/framework
 * ML algorithms can have hyperparameters
 * 
 */

MLChoiceAlgorithm:
	'mlframework' framework = FrameworkLang
	'algorithm' algorithm = MLAlgorithm
;


enum FrameworkLang: SCIKIT="scikit-learn" | R="R" ;

MLAlgorithm : 
	SVM|DT|RandomForest|LogisticRegression;


SVM: 
	name =  'SVM' ('gamma=' gamma=FLOAT)? ('C=' C=FLOAT)? ('kernel=' kernel=SVMKernel)?
	('classification' svmclassification = SVMClassification)?
	;
	
enum SVMKernel:
	linear='linear'|poly='polynomial'|radial='radial'
;

enum SVMClassification:
	cClass= "C-classification" | nuClass ="nu-classification" | oneClass="one-classification"
;

DT:
	name =  'DT' (max_depth=INT)? ; 

RandomForest: name =  'RandomForest' (ntree=INT) ;

LogisticRegression: name =  'LogisticRegression'
	'class=' class = CLASS
;

enum CLASS:
	binomial = "binomial" | gaussian = "gaussian" | poisson = "poisson" 
;

FLOAT: INT '.' INT;	


/*
 * mini DSL to specify "formula"
 * inspired from R formula 
 */
 
RFormula:
	('formula' (predictive=FormulaItem "~")? predictors=XFormula)
;

XFormula: (AllVariables | PredictorVariables);

AllVariables : name = "all" all = '.';
PredictorVariables : 
	name = "PredictorVariables" (vars+=FormulaItem ("+" vars+=FormulaItem)*)
;

// by name or integer
FormulaItem:
	column=INT | colName=STRING
;


/*
 * mini DSL for evaluation
 * choice of a "stratification" strategy and metric
 */
Validation:
	stratification=StratificationMethod
	metric+=ValidationMetric+
	
;

StratificationMethod:
	TrainingTest
;

TrainingTest:
	name = 'TrainingTest' '{'
	'pourcentageTraining' number = FLOAT
	'}'
;

enum ValidationMetric:
	RECALL='recall' | PRECISION='precision' | F1='F1'
; // TODO: can certainly be extended



